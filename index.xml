<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>S4MY9&#39;s Blog</title>
    <link>https://s4my9.github.io/</link>
    <description>Recent content on S4MY9&#39;s Blog</description>
    <image>
      <title>S4MY9&#39;s Blog</title>
      <url>https://s4my9.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://s4my9.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sun, 16 Jul 2023 11:58:47 +0700</lastBuildDate><atom:link href="https://s4my9.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>‚≠ê THM Certificate Checker ‚≠ê</title>
      <link>https://s4my9.github.io/posts/thm-certificate-checker/</link>
      <pubDate>Sun, 16 Apr 2023 11:30:03 +0000</pubDate>
      
      <guid>https://s4my9.github.io/posts/thm-certificate-checker/</guid>
      <description>If you&amp;rsquo;re a user of TryHackMe (THM), you know how valuable it is to earn certifications for your cybersecurity skills. However, verifying those certificates can sometimes be a hassle, requiring you to navigate through multiple pages or tools to ensure their validity. That&amp;rsquo;s where the THM Certificate Validator Chrome Extension comes in handy.
This lightweight and user-friendly extension allows you to quickly check the validity of your THM certificates right from your browser.</description>
    </item>
    
    <item>
      <title>[HTB]: Inject</title>
      <link>https://s4my9.github.io/posts/inject-htb/</link>
      <pubDate>Sun, 16 Jul 2023 11:58:47 +0700</pubDate>
      
      <guid>https://s4my9.github.io/posts/inject-htb/</guid>
      <description>nmap shows 3 open ports, http (TCP 8080), https (TCP 8443) and ssh (TCP 22):
nmap -A -p- 10.10.11.204 Starting Nmap 7.93 ( https://nmap.org ) at 2023-04-04 17:13 EDT Nmap scan report for inject.htb (10.10.11.204) Host is up (0.027s latency). PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 8.2p1 Ubuntu 4ubuntu0.5 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 3072 caf10c515a596277f0a80c5c7c8ddaf8 (RSA) | 256 d51c81c97b076b1cc1b429254b52219f (ECDSA) |_ 256 db1d8ceb9472b0d3ed44b96c93a7f91d (ED25519) 8080/tcp open nagios-nsca Nagios NSCA |_http-open-proxy: Proxy might be redirecting requests |_http-title: Home 8443/tcp open http SimpleHTTPServer 0.</description>
    </item>
    
    <item>
      <title>NFS no_root_squash privesc</title>
      <link>https://s4my9.github.io/posts/no-root-squash-privesc/</link>
      <pubDate>Tue, 11 Apr 2023 11:30:03 +0000</pubDate>
      
      <guid>https://s4my9.github.io/posts/no-root-squash-privesc/</guid>
      <description>Introduction In some environments, the root user on a networked file system is treated as an unprivileged user. This is known as &amp;ldquo;root squashing.&amp;rdquo; If root squashing is disabled, an attacker who gains access to an unprivileged account on the file system may be able to escalate their privileges to root.
Demonstration Attacker machine Create a directory named /tmp/mount:
mkdir /tmp/mount Mount the network file system to /tmp/mount:
mount -t nfs &amp;lt;IP&amp;gt;:&amp;lt;SHARED_FOLDER&amp;gt; /tmp/mount Copy the /bin/bash binary from the attacker&amp;rsquo;s system to the mounted file system:</description>
    </item>
    
    <item>
      <title>LFI to RCE with Log Poisoning</title>
      <link>https://s4my9.github.io/posts/lfi-to-rce-with-log-poisoning/</link>
      <pubDate>Thu, 06 Apr 2023 11:30:03 +0000</pubDate>
      
      <guid>https://s4my9.github.io/posts/lfi-to-rce-with-log-poisoning/</guid>
      <description>Introduction LFI (Local File Inclusion) is a common vulnerability found in web applications, allowing an attacker to include local files in the server. LFI Log Poisoning is a technique that leverages LFI vulnerabilities to write arbitrary content to log files on the server. By doing so, an attacker can leverage a LFI to a RCE.
This is the path of a vulnerable LFI :
http://127.0.0.1/index.php?page=/../../../../etc/passwd
The local file can be read :</description>
    </item>
    
    <item>
      <title>About me</title>
      <link>https://s4my9.github.io/posts/about/</link>
      <pubDate>Sun, 17 Jul 2022 11:58:47 +0700</pubDate>
      
      <guid>https://s4my9.github.io/posts/about/</guid>
      <description>Hi, I&amp;rsquo;m S4MY9, a french cybersecurity enthousiast ! üá´üá∑
This blog is my space to share my knowledge, discoveries, projects and thoughts on various aspects of cybersecurity. I hope you&amp;rsquo;ll find useful and interesting information here to help you navigate the complex landscape of online security.
My Learning Roadmap Here are some of my recent learning accomplishments in the field of cybersecurity:
üöß - 7/10 of all the learning paths of TryHackMe.</description>
    </item>
    
  </channel>
</rss>
